{- 
 
    @title: consensus and math lib
    @author: Samet ICGEN (Insomexe)

-}

    (int, int) ownership_check(slice address, int jobID) impure {
        (slice jettonWallet, slice jettonMinter, slice admin, int max_provider, int last_job_id, cell provider_list, cell job_list, cell active_jobId, cell provider_list_for_choising) = storage::load_data();
        throw_unless(201, check_slice_for_empty?(job_list.udict_get_maybe_ref(64, jobID)));
        slice job = (job_list.udict_get_maybe_ref(64, jobID)).begin_parse();
        job~load_uint(64);
        job~load_uint(64);
        job~load_uint(64);
        job~load_uint(1);
        job~load_ref();
        slice addressCell = (job~load_ref()).begin_parse();
        slice addressSlice1 = (addressCell~load_ref()).begin_parse();
        int count = 0;
        repeat(3){
                slice temp = addressSlice1~load_msg_addr();
                count = count + 1;
                if(equal_slices(address, temp)){ return (-1, count); }
        }
        slice addressSlice2 = (addressCell~load_ref()).begin_parse();
        repeat(2){
                slice temp = addressSlice2~load_msg_addr();
                count = count + 1;
                if(equal_slices(address, temp)){ return (-1, count); }
        }
        return (0, 0);
    }

    () create(slice full_msg) impure {
        (slice jettonWallet, slice jettonMinter, slice admin, int max_provider, int last_job_id, cell provider_list, cell job_list, cell active_jobId, cell provider_list_for_choising) = storage::load_data();
        throw_if(202, check_slice_for_empty?(job_list.udict_get_maybe_ref(64, last_job_id + 1)));
        int value_input = full_msg~load_grams();
        throw_unless(300, value_input == 60000000000);
        slice who = full_msg~load_msg_addr();
        cell msg = full_msg~load_ref();
        cell link = full_msg~load_ref();
        cell content = begin_cell().store_ref(link).end_cell();
        tuple number_tuple = tuple::test_gen_rand_tuple(max_provider);
        tuple tuple_address = job::get_address_from_tuple(number_tuple);
        slice addr0 = tuple_address~tpop();
        slice addr1 = tuple_address~tpop();
        slice addr2 = tuple_address~tpop();
        slice addr3 = tuple_address~tpop();
        slice addr4 = tuple_address~tpop();
        var stat_cell = begin_cell()
            .store_uint(0, 1)
            .store_uint(0, 1)
            .store_uint(0, 1)
            .store_uint(0, 1)
            .store_uint(0, 1)
        .end_cell();

        var res_cell = begin_cell()
            .store_uint(0, 64)
            .store_uint(0, 64)
            .store_uint(0, 64)
            .store_uint(0, 64)
            .store_uint(0, 64)
        .end_cell();
        var new_job = begin_cell()
            .store_uint(last_job_id + 1, 64)
            .store_uint(now(), 64)
            .store_uint(now() + 90, 64)
            .store_uint(0, 1)
            .store_ref(content)
            .store_ref(begin_cell()
                .store_ref(
                    begin_cell()
                        .store_slice(addr0)
                        .store_slice(addr1)
                        .store_slice(addr2)
                    .end_cell()
                )
                .store_ref(
                    begin_cell()
                        .store_slice(addr3)
                        .store_slice(addr4)
                    .end_cell()
                )
            .end_cell())
            .store_ref(
                begin_cell()
                    .store_slice(who)
                    .store_uint(now(), 64)
                    .store_grams(value_input)
                    .store_ref(msg)
                .end_cell()
            )
            .store_ref(
                begin_cell()
                    .store_ref(stat_cell)
                    .store_ref(res_cell)
                .end_cell()
            )
        .end_cell();
        job_list~udict_set_ref(64, last_job_id + 1, new_job);

        var newNot = begin_cell().store_uint(0, 1).end_cell();
        active_jobId~udict_set_ref(64, last_job_id + 1, newNot);

        storage::save_data(jettonWallet, jettonMinter, admin, max_provider, (last_job_id + 1), provider_list, job_list, active_jobId, provider_list_for_choising);
        return ();
    }

